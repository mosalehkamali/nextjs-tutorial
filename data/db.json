{
  "seasons": [
    {
      "id": 1,
      "title": "کانسپت های مربوط به Pre-rendering و Data Fetching",
      "path": "Pre-rendering-Data-Fetching",
      "topics": [
        {
          "id": 101,
          "title": "مفهوم Hydration در Pre-rendering",
          "path": "hydration",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27885/"
        },
        {
          "id": 102,
          "title": "SSR و SSG چطور لود میشن و چه تفاوت هایی دارن؟",
          "path": "SSRandSSG",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27886/"
        },
        {
          "id": 103,
          "title": "Data Fetching در Next.js چطور و کجا انجام میشه؟",
          "path": "DataFetchingInNextjs",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27887/"
        },
        {
          "id": 104,
          "title": "استفاده از getStaticProps بدون Data",
          "path": "getStaticPropsWithoutData",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27931/"
        },
        {
          "id": 105,
          "title": "استفاده از data-fetching در SSG",
          "path": "DataFetchingInSSG",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27932/"
        },
        {
          "id": 106,
          "title": "پیاده سازی به صورت SSG در روت های Dynamic",
          "path": "SSGinDynamicRout",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27934/"
        },
        {
          "id": 107,
          "title": "استفاده از getStaticPaths",
          "path": "UseGetStaticPaths",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27935/"
        },
        {
          "id": 108,
          "title": "ارسال paths به صورت Dynamic",
          "path": "DynamicPathsSend",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27936/"
        },
        {
          "id": 109,
          "title": "بررسی SSG در نسخه Build شده پروژه",
          "path": "SSGBuilding",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27937/"
        },
        {
          "id": 110,
          "title": "بررسی قابلیت preFetch کامپوننت Link",
          "path": "PreFetchInLink",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27938/"
        },
        {
          "id": 111,
          "title": "بررسی false بودن Fallback",
          "path": "FallbackFalse",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27939/"
        },
        {
          "id": 112,
          "title": "بررسی true بودن Fallback",
          "path": "FallbackTrue",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27940/"
        },
        {
          "id": 113,
          "title": "نمایش صفحه 404 در getStaticProps",
          "path": "GetStaticProps404",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27941/"
        },
        {
          "id": 114,
          "title": "ریدایرکت کردن کاربر به صفحه دلخواه در getStaticProps",
          "path": "GetStaticPropsRedirect",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27942/"
        },
        {
          "id": 115,
          "title": "بررسی blocking بودن fallback",
          "path": "FallbackBlocking",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27943/"
        },
        {
          "id": 116,
          "title": "مفهوم ISR",
          "path": "ISRConcept",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27944/"
        },
        {
          "id": 117,
          "title": "پیاده سازی صفحات به شکل ISR",
          "path": "ISRTemplate",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27945/"
        },
        {
          "id": 118,
          "title": "SSR چیه و کِی استفاده میشه؟",
          "path": "SSRConsept",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27954/"
        },
        {
          "id": 119,
          "title": "استفاده از getServerSideProps",
          "path": "getServerSidePropsUsing",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27955/"
        },
        {
          "id": 120,
          "title": "نکات مهم SSR و تابع getServerSideProps",
          "path": "getServerSidePropsPoints",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27956/"
        },
        {
          "id": 121,
          "title": "دسترسی به request و response در صفحات SSR",
          "path": "RequestResponseInSSR",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27957/"
        },
        {
          "id": 122,
          "title": "رندر صفحه بر اساس Query Params",
          "path": "QueryParamsRender",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27958/"
        },
        {
          "id": 123,
          "title": "پیاده سازی SSR در Dynamic Routes",
          "path": "SSRInDynamibic",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27959/"
        },
        {
          "id": 124,
          "title": "بررسی صفحات SSR در نسخه Build پروژه",
          "path": "SSRInBuild",
          "lessonLink": "https://sabzlearn.ir/lesson/45-27960/"
        },
        {
          "id": 125,
          "title": "نمایش صفحه 404 و Redirect کردن کاربر در صفحات SSR",
          "path": "RedirectInSSR",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28007/"
        },
        {
          "id": 125,
          "title": "Client-side rendering در Next.js",
          "path": "ClientSideRendering",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28008/"
        },
        {
          "id": 126,
          "title": "استفاده از CSR در کنار Pre-rendering",
          "path": "CSRInPreRenndering",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28011/"
        },
        {
          "id": 127,
          "title": "استفاده از پکیج SWR",
          "path": "SWRUse",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28013/"
        }
      ]
    },
    {
      "id": 2,
      "title": "توسعه بک‌اند با Next.js (قابلیت Api Route)",
      "path": "ApiRoure",
      "topics": [
        {
          "id": 201,
          "title": "معرفی فصل و قابلیت Api Route",
          "path": "ApiRoureIntroduce",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28073/"
        },
        {
          "id": 202,
          "title": "توسعه اولین Api با متد Get",
          "path": "DevelopGetApi",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28074/"
        },
        {
          "id": 203,
          "title": "نحوه دسترسی به متد Request",
          "path": "AccessRequest",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28075/"
        },
        {
          "id": 204,
          "title": "دسترسی به بادی Request",
          "path": "AccessRequestBody",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28076/"
        },
        {
          "id": 205,
          "title": "ارسال رکوئست به Api از طریق فرانت‌اند",
          "path": "SendReqToApi",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28077/"
        },
        {
          "id": 206,
          "title": "توسعه Dynamic Api",
          "path": "DynamicApi",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28078/"
        },
        {
          "id": 207,
          "title": "آشنایی با Status Code های مختلف",
          "path": "StatusCodes",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28079/"
        },
        {
          "id": 208,
          "title": "استفاده از فایل json به عنوان دیتابیس با ماژول های fs و path",
          "path": "UseJSONasDB",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28080/"
        },
        {
          "id": 209,
          "title": "توسعه Api برای ثبت‌نام کاربر جدید در سایت",
          "path": "ApiForRegister",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28081/"
        },
        {
          "id": 210,
          "title": "توسعه Api حذف کاربر با متد Delete",
          "path": "ApiForDelete",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28082/"
        },
        {
          "id": 211,
          "title": "توسعه Api ویرایش کاربر با متد های Put و Patch",
          "path": "ApiForPut",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28083/"
        },
        {
          "id": 212,
          "title": "استفاده از Slug در توسعه Api",
          "path": "SlugInApi",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28086/"
        },
        {
          "id": 213,
          "title": "نحوه استفاده از Slug برای هوم‌پیج Api",
          "path": "SlugInApiHomePage",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28087/"
        },
        {
          "id": 214,
          "title": "میشه تو pre-render از Api Route استفاده کرد؟",
          "path": "SlugInPreRendering",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28088/"
        }
      ]
    },
    {
      "id": 3,
      "title": "کار با دیتابیس MongoDB در Next.js",
      "path": "MongoDB",
      "topics": [
        {
          "id": 301,
          "title": "دیتابیس چیست؟",
          "path": "DataBaseDisc",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28108/",
          "text": "دیتابیس محلی است که ما در آن اطلاعات مختلف را ذخیره میکنیم .دیتابیس یک CLI یا Command Line Interface است که ما میتوانیم بجای کامند از GUI ها استفاده کنیم در دیتابیس داده ها در کالاکشن و در کالاکشن ها در داکیومنت ها و نهایتا در فیلدها ذخیر میشوند.",
          "link": "",
          "code": ""
        },
        {
          "id": 302,
          "title": "ایجاد دیتابیس با Mongoose",
          "path": "UseMongoose",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28110/",
          "text": "بعد از نصب دیتابیس مونگو دی بی با نصب کتابخانه mongoose  میتوانیم به دیتابیس خودمون متصل بشیم ",
          "link": "https://www.npmjs.com/package/mongoose",
          "code": "mongoose.connect('mongodb://127.0.0.1:27017/users')//users is the database name"
        },
        {
          "id": 303,
          "title": "بررسی connection های ایجاد شده",
          "path": "CheckMongooseConnection",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28111/",
          "text": "برای جلوگیری از اینکه با هر بار ریکوئست مونگوز دوباره به دیتابیس متصل شود کد های اتصال به دیتابیس را در پوشه ای جدا مثلا یوتیلز قرار میدهیم و در آن شرطی قرار میدهیم که اگر اتصال از قبل برقرار بود دیگر اتصال مجدد برقرار نکند.",
          "link": "https://www.npmjs.com/package/mongoose",
          "code": "try{ if (mongoose.connections[0].readyState) {return false;}}"
        },
        {
          "id": 304,
          "title": "آشنایی با Model و Schema - ایجاد Model کاربران",
          "path": "SchemaAndModel",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28112/",
          "text": "برای ساخت کالاکشن در دیتابیس باید برای هر کالاکشن یه فایل کدل که فایل جاوااسکریپت هست بسازیم در فایل مدل ما برای فیلد های داکیومنت های کالاکشن اسکیما میسازیم که در آن ویژگی های هر فیلد را تعیین میکنیم مثل تایپ و ریکوایرد بودن آن فیلد . فیلد id  را خود مونگودیبی برای داکیومنت ها درست میکند",
          "link": "https://www.npmjs.com/package/mongoose",
          "code": "const schema = mongoose.Schema({ name: {type: String,required: true},email: {type: String,required: true,}})"
        },
        {
          "id": 305,
          "title": "ایجاد دیتا در دیتابیس",
          "path": "SchemaAndModel",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28113/",
          "text": "برای ساخت دیتا در دیتا بیس باید مدل آن کالاکشنی که میخواهیم دیتا در آن ساخته شود را ایمپرت کنیم سپس با پراپرتی create داکیومنتی که میخواهیم را در آن میسازیم",
          "link": "https://www.npmjs.com/package/mongoose",
          "code": "const user = await usersModel.create({ name, email })"
        },
        {
          "id": 306,
          "title": "گرفتن تمام اطلاعات یک Collection",
          "path": "GetCollectionData",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28114/",
          "text": "برای دریافت اطلاعات یک کالاکشن کافیست مدل آن را ایمپرت کنیم و و روی مدل آن متد find را اجرا کنیم که خروجی آن پرامیس است و بای اویت باشد",
          "link": "https://www.npmjs.com/package/mongoose",
          "code": "const  users = await usersModel.find()"
        },
        {
          "id": 307,
          "title": "دریافت اطلاعات یک Document",
          "path": "GetDocumentData",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28115/",
          "text": " برای دریافت فیلدهای یک داکیومنت به صورت آبجکت کافی است در روت داینامیک آیدی یا هر کوئری دیگری را بگیریم و بدر متد find  آن را روی مدل کالاکشن پیاده کنیم تا داکیومنت هایی که آن فیلد را دارند برای ما ریترن شوند",
          "link": "https://www.npmjs.com/package/mongoose",
          "code": "const  users = await usersModel.find({ _id : id })"
        },
        {
          "id": 308,
          "title": "چطور یک Document رو Delete کنیم؟",
          "path": "DeleteDocument",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28116/",
          "text": " برای حذف یک داکیومنت  کافی است در روت داینامیک آیدی یا هر کوئری دیگری را بگیریم و بدر متد findOneAndDelete  آن را روی مدل کالاکشن پیاده کنیم تا داکیومنت هایی که آن فیلد را دارند حذف شوند و آنها ریترن شوند",
          "link": "https://www.npmjs.com/package/mongoose",
          "code": " const deletedUser = await usersModel.findOneAndDelete({ _id: id })"
        },
        {
          "id": 309,
          "title": "چطور رو Document رو Update کنیم؟",
          "path": "UpdateDocument",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28117/",
          "text": "برای آپدیت یا ادیت یک داکیومنت باید در روت داینامیک برای api متد PUT یا PATCH برای مدل کالاکشن متد findOneAndUpdate را با ورودی اول انتخاب داکیومنت به وسیله فیلدش و ورودی دوم تغییرات مورد نظر در قالب آبجکت قرار بدهیم",
          "link": "https://www.npmjs.com/package/mongoose",
          "code": "const updatedUser= await usersModel.findOneAndUpdate({_id : id}, {name ,email})"
        },
        {
          "id": 310,
          "title": "چطور ObjectID رو Validate کنیم؟",
          "path": "ObjectIdValidation",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28118/",
          "text": "id که مونگو دی بی برای داکیومنت ها میسازد از نوع objectID  است و وقتی که آی دی ارسالی در API  آبجکت آی دی نباشد بک اند کرش میکند برای جلوگیری از این اتفاق باید ولیدیشن برای آیدی بگذاریم برای این کار متد isValidObjectId را از کتابخانه مونگوس ایمپورت میکنیم",
          "link": "https://www.npmjs.com/package/mongoose",
          "code": " if(isValidObjectId(id)){const deletedUser = await usersModel.findOneAndDelete({ _id: id })}"
        },
        {
          "id": 311,
          "title": "استفاده از دیتابیس در صفحات SSG و SsR",
          "path": "DBInPreRendering",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28119/",
          "text": "برای استفاده از دیتابیس در صفحات ssg وssr کافی است در تابع های getStaticProps و getServerSideProps به دیتا بیس متصل بشویم و مدل کالکشن موردنظر خود را فایند کنیم سپس داده های ریترن شده استفاده کنیم البته قبلسش باید داده هارا به شکل آبجکت در بیاوریم برای این کار یک با استرینگیفای شان میکنیم سپس پارسشان میکنیم",
          "link": "https://www.npmjs.com/package/mongoose",
          "code": " const users = await usersModel.find()  data:JSON.parse(JSON.stringify(users))"
        }
      ]
    },
    {
      "id": 4,
      "title": "توسعه حرفه‌ای‌تر بک‌اند با Next.js",
      "path": "backEndInNext",
      "topics": [
        {
          "id": 401,
          "title": "کانفیگ های پیشرفته Schema در Mongoose",
          "path": "SchemaAdvance",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28177/",
          "text": "شما در Schema کانفیگ های متنوعی را میتوانیدد برای هر فیلد قرار بدهید مثل",
          "list": [
            "min و max برای فیلد های تایپ نامبر مینیمم و ماکسیمم عدد را مشخص میکند",
            "برای فیلد های با تایپ استرینگ مامیتوانیم از minLengthو maxLength استفاده کنیم که محدودیت های برای تعداد حروف فیلد مشخص میکنیم",
            "با index - unique که ورودی بولین میگیرند میتوانیم مقدار فیلد را یونیک کنیم که همه این فیلد همه داکیومنت ها متفاوت باشد",
            "با کانفیگ match میتوانیم اعتبارسنجی به وسیله regex برای فیلدمان مشخص کنیم.",
            "با کانفیگ های lowercase و uppercase میتوانیم در فیلد های با تایپ استرینگ مقدار فیلد حروف را به آپرکیس یا لورکیس تغییر دهیم",
            "به وسیله کانفیگ default میتوانیم یک مقدار پیش فرض برای آن فیلد مشخص کنیم که در صورت تعیین نشدن مقدار آن فیلد از مقدار دیفالتی که مشخص کرده ایم استفاده کنیم"
          ],
          "link": "https://mongoosejs.com/docs/api/schema.html#Schema()",
          "code": ""
        },
        {
          "id": 402,
          "title": "مفهوم timestamps",
          "path": "Timestamps",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28178/",
          "text": "بعضی اوقات نیاز است که زمان دقیق ساخه شدن یه داکیومنت یا آپدیت شدنش را داشته باشیم برای این اطلاعات باید بعد از آبجکت اول که ساختار اسکیما فیلد هاست در یک آبجکت دیگر پارامتر timestamps را برابر با true قرار میدهیم با این کار دو فیلد یگر در داکیومنت ما ساخته میشود که یکی زمان ساخته شدن داکیومنت را نشان میدهد به نام createdAt و دیگری زمان آخرین آپدیت داکیومنت را نشان میدهد به نام updatedAt",
          "list": [],
          "code": "const schema = new mongoose.Schema({ ساختار فیلدها }, { timestamps: true })"
        },
        {
          "id": 403,
          "title": "مفهوم Relation در دیتابیس",
          "path": "RelationInDB",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28179/",
          "text": "بعضی وقت ها نیاز است بین کالکشن ها باهم ارتباط برقرار کنند این ارتباط ها به سه شکل میتوانند وجود داشته اول.",
          "list": [
            "one to one : یعنی یک داکیومنت با یک داکیومنت دیگر ارتباط داشته باشد",
            "one to many : ارتباط یک داکیومنت با چند داکیومنت ",
            "many to many : ارتباط چند داکیومنت با چند داکیومنت به صورت مشترک"
          ],
          "code": ""
        },
        {
          "id": 404,
          "title": "توسعه Relation از نوع One-To-Many",
          "path": "OneToManyRelation",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28181/",
          "text": "برای ارتباط بین یک داکیومنت با چند داکیومنت بای یک فیلد به دداکیمنت هایی که مخواهیم به آن متصط باشند بهیم تایپ آن را برابر با    type: mongoose.Types.ObjectId قرار میدهیم و ورودی آن را و کانفیگ ref آن را برابر با نام مدلی که میخواهیم داکیومنت هایش متصل شویم قرار میدهیم سپس زمان ساخت داکیومنت این فیلد را برابر با آبجکت آی دی داکیومنت والد قرار میدهیم",
          "list": [],
          "link": "",
          "code": " teacher:{type: mongoose.Types.ObjectId,ref:'Teacher',required:true}"
        },
        {
          "id": 405,
          "title": "آشنایی با متد Populate",
          "path": "Populate",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28182/",
          "text": "برای نمایش داده های داکیومنتی که به آن متصل شدیم به جای آیدی داکیومنت از متد populate بع از find  استفاده میکنیم و نام فیلدی که در آن آبجکت آی دی وارد شده است را به عنوان path به وروددی اش میدهیم",
          "list": [],
          "link": "",
          "code": " const courses = await courseModel.find().populate('fild name')"
        },
        {
          "id": 406,
          "title": "انتخاب یا حذف فیلد های مورد نظر",
          "path": "SelectFild",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28183/",
          "text": "برای انتخاب یک فیلد که تنها آن در رسپانس فرستاده شود نام آن فیلد را در ورودی دوم متد find یا populate وارد میکنیم یا برای حذف فیلد در همانجا فقط یک منها قبلش میگذاریم",
          "list": [],
          "link": "",
          "code": "    const courses = await courseModel.find({},'-__v').populate('teacher','name')"
        },
        {
          "id": 407,
          "title": "انواع Relation در دیتابیس (Reference Vs Embedded)",
          "path": "RelationKinds",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28184/",
          "text": "به جز روش reference که فقط آبجکت آی دی والد را به فیلد ارتباط میدهیم یک روش دیگر هم هست به اسم embedded که کل آبجکت داکیومنت اول را در فیلد داکیومنت دوم قرار میدهیم برای این کار تایپ فیلد را برابر با اسکیمای مدل داکیومنت اول قرار میدهیم و زمان ساخت داکیومنت دوم در آن فیلد داکیومنت اول ساخته شود",
          "list": [],
          "link": "",
          "code": ""
        },
        {
          "id": 408,
          "title": "توسعه Virtual Relation",
          "path": "VirtualRelation",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28186/",
          "text": "زمانی که نیاز است یک رابطه  one to many  داشته باشیم نمیتوانیم در مدل لوکال تمام فیلد های ارتباطی داکیومنت های foriegn را بسازیم برای حل این مشکل از virtual relation استفاده میکنیم در این روش یک فیلد مجازی برای مدل لوکال میسازیم و فیلد مشابه را در لوکال و فارن مشخص میکنیم و رفرنس آن را به مدل فارن میدهیم با این کار در زمانی که میخواهیم اطلاعات آن کالاکشن لوکال را بگیریم اگر آد فیلد مجازی را populate  کنیم اطلاعات داکیومنت های فارن که با لوکال ارتباط دارن  در آن فیلد مجازی به ما نمایش داده میشود.",
          "list": [],
          "link": "",
          "code": "schema.virtual('comments',{localField:'_id',foreignField:'course',ref:'Comment'})"
        },
        {
          "id": 409,
          "title": "استفاده از پکیج Fastest-Validator",
          "path": "FastestValidator",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28187/",
          "text": "برای ایجاد یک ولیدیشن مطمئن که از کرش کردن بک اند جلوگیری کند میتوانیم از پکیج Fastest-Validator استفاده کنیم یک اسکیما در فایل ولیدیشن میسازیم کانفیگ های مورد نظر را فیلدای مدل میدهیم و بع آن را اکسپرت میکنیم و در api استفاده میکنیم",
          "list": [],
          "link": "https://www.npmjs.com/package/fastest-validator",
          "code": "const validator = courseValidator(req.body)"
        },
        {
          "id": 410,
          "title": "مفهوم Middleware چیست؟",
          "path": "MiddlewareConcept",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28308/",
          "text": "middleware یا میان افزار بین فرانت اند و بک اند قبل از رسیدن ریکوئست ها به بک اند اجرا میشود و ما میتوانیم برای ریکوئست ها ولیدیشن تایین کنیم تا و قبل از رسیدن آن ها به بک اند اگر اشکالی وجود دارد از همان میان افزار رسپانس متناسب را به فرانت اند ارسال کنیم",
          "list": [],
          "link": "https://nextjs.org/docs/app/building-your-application/routing/middleware",
          "code": ""
        },
        {
          "id": 411,
          "title": "محدود کردن Middleware به صفحات خاص",
          "path": "MiddlewareConfig",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28321/",
          "text": "وقتی بخواهیم میدل ویر فقط در بعضی روت ها اجرا شود آبجکتی به اسم config را اکسپورت میکنیم و در آن پراپرتی matcher را برابر با path هایی که میخواهیم middleware در آن اجرا شود قرار میدهیم",
          "list": [],
          "link": "https://nextjs.org/docs/app/building-your-application/routing/middleware#matching-paths",
          "code": "export const config = {matcher: '/users:path*'}"
        }
      ]
    },
    {
      "id": 5,
      "title": "کانسپت های پیشرفته Next.js",
      "path": "ProNextConcept",
      "topics": [
        {
          "id": 501,
          "title": "استفاده از کامپوننت Image",
          "path": "imageComponentUsing",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28633/"
        },
        {
          "id": 502,
          "title": "Prop های پیشرفته Image",
          "path": "imageComponentProps",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28647/"
        },
        {
          "id": 503,
          "title": "استفاده از کامپوننت Head",
          "path": "HeadComponentUsing",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28648/"
        },
        {
          "id": 504,
          "title": "ست کردن کانفیگ های گلوبال Head در _app.js",
          "path": "HeadGlobalConfigs",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28735/"
        },
        {
          "id": 505,
          "title": "آشنایی با فایل next.config.js - انواع ریدایرکت دیفالت",
          "path": "RedirectDefault",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28736/"
        },
        {
          "id": 506,
          "title": "کانفیگ های env",
          "path": "envConfigs",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28738/"
        },
        {
          "id": 507,
          "title": "ریدایرکت کاربر از طریق Server",
          "path": "serverRedirect",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28739/"
        },
        {
          "id": 508,
          "title": "ایجاد Module Path های کاستوم (Absolute Imports)",
          "path": "craeteMoudlePath",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28740/"
        },
        {
          "id": 509,
          "title": "کاربرد فایل _document.js",
          "path": "documentjs",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28741/"
        },
        {
          "id": 510,
          "title": "پکیج React-toastify",
          "path": "ReactToastify",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28901/"
        }
      ]
    },
    {
      "id": 6,
      "title": "بررسی تغییرات Next.js 13",
      "path": "Next13",
      "topics": [
        {
          "id": 601,
          "title": "آشنایی با App Router",
          "path": "AppRouter",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28956/"
        },
        {
          "id": 602,
          "title": "پیاده سازی Dynamic Route",
          "path": "DynamicRouteInApp",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28957/"
        },
        {
          "id": 603,
          "title": "استفاده از قابلیت Route Group",
          "path": "RouteGroup",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28965/"
        },
        {
          "id": 604,
          "title": "پیاده سازی Slug در App Router",
          "path": "SlugInAppRouter",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28966/"
        },
        {
          "id": 605,
          "title": "کاربرد فایل layout.js",
          "path": "layoutJs",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28967/"
        },
        {
          "id": 606,
          "title": "پیاده سازی Nested Layout",
          "path": "NestedLayout",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28968/"
        },
        {
          "id": 607,
          "title": "مفهوم Server Component و Client Component",
          "path": "ServerAndClientComponents",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28969/"
        },
        {
          "id": 608,
          "title": "اگه همه چی سمت سرور رندر میشه، پس Client Component چیه؟",
          "path": "ClientComponent",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28970/"
        },
        {
          "id": 609,
          "title": "کِی باید از کدوم استفاده کنیم؟ (کلاینت کامپوننت و سرور کامپوننت)",
          "path": "WhenClientComponent",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28977/"
        },
        {
          "id": 610,
          "title": "آشنایی با cache جدید نکست",
          "path": "KnowingCeche",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28978/"
        },
        {
          "id": 611,
          "title": "بررسی نسخه SSG در نسخه build پروژه",
          "path": "SSGInbuild",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28979/"
        },
        {
          "id": 612,
          "title": "پیاده سازی SSR در App Router",
          "path": "HandleSSR",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28980/"
        },
        {
          "id": 613,
          "title": "پیاده سازی ISR در App Router",
          "path": "HandleISR",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28981/"
        },
        {
          "id": 614,
          "title": "پیاده سازی سرور کامپوننت و کاینت کامپوننت به صورت Nested",
          "path": "NestedComponent",
          "lessonLink": "https://sabzlearn.ir/lesson/45-28982/"
        }
      ]
    }
  ]
}
